'''
Created on Aug 19, 2015

@author: bardya

Purpose: Retrieve the collection of genomes of a particular organism from ncbi and
group them according to their status of sequencing, check for updates and replace older
genomes by new ones.
'''
import os,sys

#OUTDIRPATH = "/share/project/bardya/genomes/Bacteria_151028_entrez"
#OUTDIRPATH = "/home/bardya/usr/data/15_04/"
OUTDIRPATH = "/home/bardya/usr/data/PlasmidDB/plasmid_replication_initiation_proteins"

class NcbiGenomeMapError(Exception):
    pass

def read_genmap_dict(filename, sep='\t'):
    """
    Reads the information of a NCBIgenomeMap dictionary. Also preforms some validation
    """
    header = True
    fieldnames = []
    genome_dict = {}

    try:
        with open(filename, "r") as f:
            for i, line in enumerate(f):
                line = line.strip()
                if i==0 and header:
                    fieldnames = line.replace('#','').split(sep)
                else:
                    if not _validate_seq(line, len(fieldnames), sep):
                        raise NcbiGenomeMapError("Inconsistent number of fields in \"{0}\" at line {1}"
                                         .format(filename, i))
                    linefields = line.split(sep)
                    organism_id = line[0].replace(' ','_') + '_' + line[1].replace(' ','_')
                    organism_dict = dict(zip(fieldnames,linefields))
                    
                    genome_dict[organism_id] = organism_dict

    except IOError as e:
        raise NcbiGenomeMapError(e)

    return genome_dict

def _validate_seq(line, numofields, sep):
    if len(line.split(sep) == numofields):
            return False
    return True


if __name__ == "__main__":
        
    #ncbi_genome_dict = read_genmap_dict("/home/bardya/Downloads/genomes_proks.txt")
    #for org_id, org_dict in ncbi_genome_dict.items():
    #cmd = "wget -r -b -c -nH --cut-dirs=2 " + address
    #subprocess.call(cmd)
    # Imports
    
    from Bio import Entrez
    from Bio import SeqIO
    
    #############################
    # Retrieve NCBI Data Online #
    #############################
    
    Entrez.email     = "djahanschiri@bio.uni-frankfurt.de"
    #search_term      = "acinetobacter[Organism] "
    #search_term     += "NOT plasmid[Title]"
    #search_term     += " AND RefSeq[Keyword] AND genome[Title] AND complete[Title] NOT gene[Title] NOT genes[Title]"
    #search_term     += " AND RefSeq[Keyword] AND genome[Title] NOT gene[Title] NOT genes[Title]"
    #handle           = Entrez.esearch(db="nuccore", term=search_term, retmode="xml", retmax=10000)
    #genomeIds        = Entrez.read(handle)['IdList']
    #handle.close()
    
    #print(len(genomeIds))
    
#     genomeIds2 = []
#     with open("genome_accessions.txt", 'r') as genome_accessions:
#         for i, ga in enumerate(genome_accessions.readlines()):
#             genomeIds2.append(ga.strip())
#      
#     genomeIds = list(set(genomeIds1) | set(genomeIds2))
#     print(len(genomeIds))
    
    gbrecords = []
    fastarecords = []
    #genomeIds = ["117625201","26249424","15610359","15611001","301157681","57117165","323130889","49476024","183982684","301156836","121636123","254831692","15607241","379030290","207856528","207857526","301157765","16802971","16803567","183985342","15608039","16766203","267993875","301158696","16763616","333003134","205353181","323128652","15608603","379030282","16128924","267990055","16802852","217964719","26247644","301157638","15607827","183982705","15842050","16802660","26246956","15609368","15610083","379026791","16802459","267995544","15607390","82524782","301157947","183981791","323129678","16804710","57116812","207858742","323131814","333003154","323129690","379026793","15608156","281603807","15607307","323129869","15842877","301157895","16766200","16802201","163869216","301157286","15610941","15609067","161486057","301159438","16766789","15842821","301160209","15610147","15608377","15610704","15611007","15839888","16802936","31983569","16802841","183985414","15607641","56479884","15842973","391248501","267993873","15608149","161486244","215488983","15610094","15610552","323129684","16766924","16766754","15803477","301158641","301160698","323129672","16764751","16803112","16765976","15609383","15609013","15610677","16803486","26250621","15609574","26247467","15804024","238900245","183982333","301158473","15608950","15608665","267995981","15800703","15610608","15608239","301158234","57116911","16764452","267995010","267996006","16802716","323130146","215488966","267995002","215488973","15610719","121636385","15609639","323128651","57116887","16803884","15607875","301158077","15800723","16802800","301159457","15801782","207856151","16764449","254832139","41409831","207855928","15610002","332987397","57116799","15608284","238900243","301159421","16766193","16802795","31983559","17233503","15608644","15609169","15802645","267993009","15610550","15608109","118467898","323129796","16804106","207857135","121602308","26249458","15609116","254832341","16802362","15609023","110807455","379026635","323130905","323132534","148662177","15609529","15610010","15607317","15609516","301157127","161486060","91213874","332989768","194429619","194429618","15610791","323130833","57116719","183985396","16764772","301160027","15607591","15607898","267995886","15610220","15610471","26249419","16802558","16803307","255028203","16803640","15610960","15607573","15610222","26249401","31983578","301159447","30063767","15610121","15610099","16804596","16804220","301159448","57116913","16765631","323128687","379026595","148661862","15608727","215487972","333003149","31983790","15608485","16803054","205353902","15607819","15802132","16764500","323128874","15607239","15839991","15804220","16764448","333006271","323130001","267993210","15608791","15610638","15608920","15608728","16803781","16803275","161352463","56404024","323129357","56404031","395137658","323974626","301159682","15610304","301160468","15609364","16764404","16802097","57116950","15802913","323129691","17233481","16803785","16766177","267993306","301160586","16802625","15608121","379026598","15610413","333017477","15610545","267994997","227888116","16802969","57116909","15841441","215276197","57117058","16764600","26250272","301157061","15608325","379026413","15609175","31792604","15843137","301159429","261888683","15802515","118464818","16763117","16803125","15608511","57117078","333002820","16802203","110644186","301159445","267993302","15802351","57116701","444848445","207858979","323130140","267993293","15610659","15841716","323128976","267996024","163869241","183982297","15801498","16802626","16766189","148661202","16803456","15799714","301160559","16763124","301161074","41409836","323132769","15804658","323130576","15609511","15610940","284924592","16804467","194429634","91213983","267992707","391255477","301157515","15804159","332990566","110807237","15609348","15610049","16803865","267995078","15610135","209922041","301157685","267995015","16803014","15607243","15843432","15842811","15609833","301159441","284924617","267995885","15608126","157418221","301157314","15608249","16766264","118464876","15827746","16803128","15608444","267995000","15841680","301156835","332989017","16766191","15609521","31983575","15610637","15801390","323132123","26250270","301157899","16802250","15607242","15610118","17233483","254832476","57116987","49474965","16763831","29142710","301159450","15608122","82778670","15801642","157418252","294994475","15610631","16802478","10955344","267992843","15804490","332989753","15609496","15804224","91213389","15610767","15610078","301157954","183983641","267993280","323129173","15608662","15802086","24114232","15610217","301160674","57117079","15610179","15799998","15611018","30063899","267993874","15611002","15609074","41406580","15610251","16804468","15804222","15608378","207858222","15609185","15610807","183985427","15607467","161486035","15610071","15608376","15610422","207856621","15608344","16131031","15608142","267996476","323131375","215276202","267992626","49476028","29141281","57117044","15800834","207858959","301158758","16766204","224991305","16803335","16131029","238900244","301159519","301159439","117626645","26250538","15803448","16803417","17233474","16803485","26251205","15800650","15610022","16766790","16130033","301159124","215488991","301160436","15610514","15610346","379028483","57117145","16803116","29140996","301157701","15607631","254830319","301158931","15800960","207858990","15607295","267992163","15608698","323132300","15607321","31983531","254830572","16802251","267993289","15804920","301160244","15803476","15608834","15607961","15607726","347548630","323129921","16763926","26251207","15610221","16803309","16763116","267995764","15610287","15610394","15609206","163867461","183982683","301158361","301159133","332988220","379029012","16764764","301157880","157418255","301157772","207856369","267992309","15803653","207857102","15802403","323129665","222035573","207856623","15801917","215488971","301160969","323128943","15610899","16763928","15804218","15607897","301160469","215488979","267994138","301158697","16802091","254830432","323131962","15839560","15610894","15608478","29144601","15610224","301158452","301159451","15607314","15842248","16803955","15609690","41409991","215488976","323130574","16802627","163869217","15610681","161486128","15610670","15607240","24111499","15802358","301158643","16803811","15607817","301158196","15842972","15607309","267993294","267995004","15801852","15607734","379027104","267996197","301159240","15610853","254831517","349736703","15610223","301158224","15608932","15610982","15608776","379028079","379029268","16802308","15611005","207859507","15609068","41409123","183985336","15609045","46907073","16804626","15608885","301157634","31792605","15609168","313646761","163869242","15609378","157418156","31983564","16764338","15610082","16764759","24115149","31983590","31983562","323129072","15609609","15839636","15608463","332989767","15609472","16803735","16767325","15607343","15804134","16767607","267993303","15608848","41409422","16129187","15803338","16764748","15610800","26251202","323129694","254830571","15609945","57116693","15610123","301160252","226223321","31983544","323130408","15608778","31983565","118464767","16803995","301160752","301157950","301160850","15801581","379026597","57117162","15609520","15608921","29144082","15802646","215488968","15608153","267990073","323132656","15609840","301158415","15610382","183982761","267990075","15841607","16803468","267993095","267995006","15607268","301157686","26249427","183982298","15610738","56404015","15607392","16764140","16765413","39546341","301158117","15608042","49476012","267994151","148660681","30062756","16803043","26249420","57116930","15608949","26247526","16802637","163869228","15801738","379029003","333004729","15607428","15833817","57117090","15608412","16802692","301156883","267995024","15608332","31983579","332990562","161350068","15608798","255030852","301157937","15800647","15802787","15607316","31983529","16804731","26249525","16803826","301158660","15610074","16802477","333003136","56404005","16765297","161486368","16765095","15609515","15609848","284924607","301158012","301157939","215487128","215488961","16803330","15801734","301159430","255028524","16766187","254830248","16802236","15609412","16804090","15610076","29144599","15803817","15608488","379028161","301157932","15609076","267993002","15610785","16764497","163868786","332990571","254831880","215488970","15610620","15609028","57117088","15610240","354868527","15841910","30061705","118463709","254831946","46908081","301158728","16804587","301159796","15609620","301159458","472420548","15610707","15609111","15607987","30062442","267992427","15608881","15804250","323129567","15803511","16803723","15609525","347548632","29144603","215488964","15608560","207858950","254831344","267993839","15610536","15804226","215276200","267993287","207858184","301159360","16802185","15804072","16763113","207857269","379026798","12084935","194429626","121636704","121602875","301158656","15607494","15610692","15804884","15802516","267992909","254831067","301159434","157418225","183981785","15610917","16765196","15840354","15607429","267992906","16802248","16763115","301159433","301157684","56404036","323130416","16803871","15841318","255030765","267993291","472409110","15610801","301157136","31983567","15610084","15609337","15609371","15609119","15610006","16802934","15611004","284924634","215276195","301160045","301158195","254830433","15799923","15609582","15608935"]
    geneIds = []
    with open('/home/bardya/usr/data/PlasmidDB/plasmid_replication_initiation_proteins/gis') as infile:
        for line in infile.readlines():
            if line.startswith("#"):
                continue
            geneIds.append(line)

    handle1 = Entrez.efetch(db="nuccore", id=geneIds, rettype="fasta", retmode="xml")
    rec = Entrez.parse(handle1)
#     for reco in rec:
#         print(reco)
#         break
#     sys.exit()
    
    for i, rec in enumerate(rec):
        gid = geneIds[i]
        if os.path.isfile(os.path.join(OUTDIRPATH, gid+".ffn")):
            continue 
#         handle2 = Entrez.efetch(db="nuccore", id=gid, rettype="gb", retmode="text")
#         outpath = os.path.join(OUTDIRPATH,"refseq_" + rec["GBSeq_definition"].split(',')[0].strip().replace(' ','_') + ".gb")
#         print(outpath)
#         file_out = open(outpath, "w")    # store each genomes .gb in separate files
#         file_out.write(handle2.read())
#         file_out.close()
        
#         handle2 = Entrez.efetch(db="nuccore", id=gid, rettype="fasta", retmode="text")
#         outpath = os.path.join(OUTDIRPATH, str(gid) + ".fasta")
#         print(outpath)
#         file_out2 = open(outpath, "w")    # store each genomes .gb in separate files
#         file_out2.write(handle2.read())
#         file_out2.close()
        
        handle3 = Entrez.efetch(db="protein", id=gid, rettype="fasta", retmode="text")
        outpath = os.path.join(OUTDIRPATH, str(gid) + ".ffn")
        print(outpath)
        file_out3 = open(outpath, "w")    # store each genomes .gb in separate files
        file_out3.write(handle3.read())
        file_out3.close()
        
    ###############################
    # Generate Genome Fasta files #
    ###############################
    
    sequences   = []  # store your sequences in a list
    headers     = []  # store genome names in a list (db_xref ids)

#         genomeGenbank  = SeqIO.read("genBankRecord"+str(i)+".gb", "genbank")  # parse in the genbank files
#         header         = genome.features[0].qualifiers['db_xref'][0]          # name the genome using db_xfred ID
#         sequence       = genome.seq.tostring()                                # obtain genome sequence
#     
#         headers.append('>'+header)  # store genome name in list                                     
#         sequences.append(sequence)  # store sequence in list
#     
#         fasta_out = open("genome"+str(i)+".fasta","w")     # store each genomes .fasta in separate files
#         fasta_out.write(header)    # >header ... followed by:
#         fasta_out.write(sequence)  # sequence ... 
#         fasta_out.close()          # close that .fasta file and move on to next genome
    
## We instead upload the list of ID beforehand 
# gis=[166706892,431822405,431822402]
# request = Entrez.epost("nucleotide",id=",".join(map(str,gis)))
# result = Entrez.read(request)
# webEnv = result["WebEnv"]
# queryKey = result["QueryKey"]
# handle = Entrez.efetch(db="nucleotide",retmode="xml", webenv=webEnv, query_key=queryKey)
# for r in Entrez.parse(handle):
#     # Grab the GI 
#     try:
#         gi=int([x for x in r['GBSeq_other-seqids'] if "gi" in x][0].split("|")[1])
#     except ValueError:
#         gi=None
#     print ">GI ",gi," "+r["GBSeq_primary-accession"]+" "+r["GBSeq_definition"]+"\n"+r["GBSeq_sequence"][0:20]



# TODO: Write an exception handler to rerun if not all genes are retrieved